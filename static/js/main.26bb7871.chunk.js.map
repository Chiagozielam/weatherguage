{"version":3,"sources":["component/images/weather-guage.png","component/title.jsx","component/form.jsx","component/weather.jsx","component/parallax.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Title","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","this","city","country","class","temperature","humidity","description","error","React","Component","Parallax","src","alt","API_KEY","App","state","undefined","humdity","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","Logo","component_title","src_component_form","component_weather","parallax","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.26bb7871.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/weather-guage.9ec4b692.png\";","import React from \"react\";\r\nimport \"./title.css\"\r\n\r\nconst Title = () => (\r\n  <div>\r\n    <h1>Weather Guage</h1>\r\n    <p className=\"sub-title\">Find out, temperature, conditions, and more...</p>\r\n  </div>\r\n);\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport \"./form.css\"\r\n\r\nconst Form = props => (\r\n  <div>\r\n    <form onSubmit={props.getWeather}>\r\n      <input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n      <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n      <button className=\"btn blue waves-light\">Get Weather</button>\r\n    </form>\r\n  </div>\r\n);\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./weather.css\"\r\n\r\nclass Weather extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"left weather-items\">\r\n        {this.props.city && this.props.country && (\r\n          <p class=\"card-panel\">\r\n            Location: {this.props.city}, {this.props.country}\r\n          </p>\r\n        )}\r\n        {this.props.temperature && <p class=\"card-panel\">Temperature: {this.props.temperature}</p>}\r\n        {this.props.humidity && <p class=\"card-panel\">Humidity: {this.props.humidity}</p>}\r\n        {this.props.description && <p class=\"card-panel\">Conditions: {this.props.description}</p>}\r\n        {this.props.error && <p class=\"card-panel\">{this.props.error}</p>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weather;\r\n","import React, { Component } from \"react\";\r\n\r\nconst Parallax = () => (\r\n  <div className=\"row\">\r\n    <div className=\"col s1 m3 l3\" />\r\n    <div className=\"col s10 m6 l6\">\r\n      <img\r\n        src=\"http://www.clker.com/cliparts/q/h/b/e/B/b/gradient-wave-hi.png\"\r\n        className=\"responsive-img\"\r\n        alt=\"\"\r\n      />\r\n    </div>\r\n    <div className=\"col s1 m3 l3\" />\r\n  </div>\r\n);\r\n\r\nexport default Parallax;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Title from \"./component/title\";\nimport Form from \"./component/form\";\nimport Weather from \"./component/weather\";\nimport Parallax from \"./component/parallax\";\nimport Logo from \"./component/images/weather-guage.png\";\n\nconst API_KEY = \"141e4ea94f8ceec00576decc779d0f6a\";\n\nclass App extends Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humdity: undefined,\n    description: undefined,\n    error: undefined\n  };\n\n  getWeather = async e => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=metric&APPID=${API_KEY}`\n    );\n    const data = await api_call.json();\n    if (city && country) {\n      console.log(data);\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter the values\"\n      });\n    }\n  };\n  render() {\n    return (\n      <div className=\"App center grey\">\n        <div className=\"navbar-fixed\">\n          <nav className=\"white\">\n            <ul>\n              <li>\n                <p className=\"the-logo\">\n                  <img src={Logo} class=\"responsive-img\" />\n                </p>\n              </li>\n            </ul>\n          </nav>\n        </div>\n\n        <div className=\"row\">\n          <div className=\" col s1 m2 l3 \" />\n          <div className=\" col s10 m8 l6\">\n            <p className=\"btn\">\n              You can check the weather of anywhere in a click!\n            </p>\n            <Title />\n            <Form getWeather={this.getWeather} />\n            <Weather\n              temperature={this.state.temperature}\n              city={this.state.city}\n              country={this.state.country}\n              humidity={this.state.humidity}\n              description={this.state.description}\n              error={this.state.error}\n            />\n          </div>\n          <div className=\" col s1 m2 l3 \" />\n        </div>\n        <Parallax />\n        <footer>\n          <p>Created with React and Materialize Css By Daniel Don</p>\n          <p className=\"btn\">\n            <a\n              href=\"https://chiagozielam.github.io\"\n              target=\"_blank\"\n              className=\"white-text\"\n            >\n              View Portfolio\n            </a>\n          </p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}